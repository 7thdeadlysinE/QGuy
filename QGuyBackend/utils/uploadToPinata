const pinataSDK = require("@pinata/sdk");
const fs = require("fs");
const path = require("path");
require("dotenv").config();

const pinataApiKey = process.env.PINATA_API_KEY || "";
const pinataApiSecret = process.env.PINATA_API_SECRET || "";
const pinata = new pinataSDK(pinataApiKey, pinataApiSecret);

async function storeImages(imagesFilePath) {
  const fullImagesPath = path.resolve(imagesFilePath);

  // Filter the files in case they are files that are not .png
  const files = fs
    .readdirSync(fullImagesPath)
    .filter((file) => file.includes(".png"));

  const imageMapping = {}; // Mapping to store image URLs by name

  console.log("Uploading to IPFS");

  for (const fileIndex in files) {
    const fileName = files[fileIndex];
    const imageName = fileName.replace(".png", ""); // Remove the .png extension
    const readableStreamForFile = fs.createReadStream(
      `${fullImagesPath}/${fileName}`
    );
    const options = {
      pinataMetadata: {
        name: fileName,
      },
    };
    try {
      const result = await pinata.pinFileToIPFS(readableStreamForFile, options);
      const imageUrl = `ipfs://${result.IpfsHash}`;
      imageMapping[imageName] = imageUrl; // Store the image URL in the mapping
    } catch (error) {
      console.log(error);
    }
  }
  return imageMapping; // Return the mapping
}

module.exports = { storeImages };
